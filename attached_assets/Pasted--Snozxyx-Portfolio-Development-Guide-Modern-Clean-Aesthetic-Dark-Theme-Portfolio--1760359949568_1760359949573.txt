# ðŸš€ Snozxyx Portfolio Development Guide
*Modern, Clean, Aesthetic Dark Theme Portfolio*

---

## ðŸŽ¯ Project Overview

Create a multi-page portfolio for **Gabhasti Giri** (aka **Snozxyx**) - a software developer and gaming enthusiast specializing in streaming technology, Discord bots, and cross-platform development.

### Design Philosophy
- **Modern & Minimalist**: Clean layouts with purposeful white space
- **Dark Aesthetic**: Deep black (#000000) with strategic accent colors
- **Smooth Animations**: Subtle yet engaging micro-interactions
- **Professional Gaming Vibe**: Balance between tech professionalism and gaming culture

---

## ðŸŽ¨ Visual Design System

### Color Palette
```css
:root {
  --primary-bg: #000000;           /* Pure black background */
  --secondary-bg: #0a0a0a;         /* Slightly lighter black for cards */
  --accent-bg: #111111;            /* Hover states and borders */
  --primary-text: #ffffff;         /* Pure white text */
  --secondary-text: #a3a3a3;       /* Gray for secondary text */
  --accent-color: #00d4ff;         /* Cyan blue for highlights */
  --gaming-accent: #ff6b35;        /* Orange for gaming elements */
  --success: #00ff88;              /* Green for active status */
  --gradient-1: linear-gradient(135deg, #00d4ff 0%, #ff6b35 100%);
  --gradient-2: linear-gradient(135deg, #000000 0%, #1a1a1a 100%);
}
```

### Typography
```css
/* Primary Font - Modern & Clean */
@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');

/* Code/Tech Font */
@import url('https://fonts.googleapis.com/css2?family=JetBrains+Mono:wght@300;400;500&display=swap');

/* Gaming/Display Font */
@import url('https://fonts.googleapis.com/css2?family=Orbitron:wght@400;700;900&display=swap');
```

---

## ðŸ“¦ Essential NPM Packages

### Core Framework & Styling
```bash
# Next.js 14+ with TypeScript
npm install next@latest react@latest react-dom@latest typescript @types/node @types/react @types/react-dom

# Styling
npm install tailwindcss @tailwindcss/typography autoprefixer postcss
npm install class-variance-authority clsx tailwind-merge

# UI Components
npm install @radix-ui/react-slot @radix-ui/react-dialog @radix-ui/react-tabs
npm install lucide-react # Modern icons
```

### Animation & Effects Libraries
```bash
# Core Animation
npm install framer-motion # Primary animation library
npm install @react-spring/web # Alternative smooth animations
npm install react-intersection-observer # Scroll-based animations

# Advanced Effects
npm install three @react-three/fiber @react-three/drei # 3D effects
npm install particles.js # Background particles
npm install react-parallax # Parallax scrolling
npm install react-transition-group # Page transitions

# Text Animations
npm install react-typed # Typewriter effect
npm install react-countup # Number counting animations
npm install react-text-transition # Smooth text transitions

# Visual Effects
npm install react-lottie-player # Lottie animations
npm install react-tilt # 3D tilt effects on hover
npm install react-reveal # Reveal animations on scroll
npm install aos # Animate on scroll library
```

### Performance & Optimization
```bash
# Image Optimization
npm install next/image sharp

# Loading & Performance
npm install react-loading-skeleton # Skeleton loading
npm install react-lazyload # Lazy loading
npm install @vercel/analytics # Analytics
```

---

## ðŸŽ¬ Animation & Effect Implementations

### 1. Page Transitions
```typescript
// components/PageTransition.tsx
import { motion, AnimatePresence } from 'framer-motion';

const pageVariants = {
  initial: {
    opacity: 0,
    y: 20,
    scale: 0.98
  },
  in: {
    opacity: 1,
    y: 0,
    scale: 1
  },
  out: {
    opacity: 0,
    y: -20,
    scale: 1.02
  }
};

const pageTransition = {
  type: 'tween',
  ease: 'anticipate',
  duration: 0.4
};

export const PageTransition = ({ children, className = '' }) => {
  return (
    <motion.div
      initial="initial"
      animate="in"
      exit="out"
      variants={pageVariants}
      transition={pageTransition}
      className={className}
    >
      {children}
    </motion.div>
  );
};
```

### 2. Hero Section with Typing Effect
```typescript
// components/HeroSection.tsx
import { motion } from 'framer-motion';
import Typed from 'react-typed';

export const HeroSection = () => {
  return (
    <section className="min-h-screen flex items-center justify-center bg-black relative overflow-hidden">
      {/* Animated Background Grid */}
      <div className="absolute inset-0 bg-[linear-gradient(rgba(0,212,255,0.03)_1px,transparent_1px),linear-gradient(90deg,rgba(0,212,255,0.03)_1px,transparent_1px)] bg-[size:50px_50px] animate-pulse" />
      
      <div className="container mx-auto px-6 z-10">
        <motion.div
          initial={{ opacity: 0, y: 50 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.8, ease: "easeOut" }}
          className="text-center"
        >
          <motion.h1 
            className="text-6xl md:text-8xl font-bold text-white mb-6"
            initial={{ scale: 0.5, opacity: 0 }}
            animate={{ scale: 1, opacity: 1 }}
            transition={{ delay: 0.2, duration: 0.8, ease: "backOut" }}
          >
            <span className="bg-gradient-to-r from-cyan-400 to-orange-400 bg-clip-text text-transparent">
              Snozxyx
            </span>
          </motion.h1>
          
          <div className="text-xl md:text-3xl text-gray-300 mb-8 h-16">
            <Typed
              strings={[
                "Software Developer",
                "Gaming Enthusiast", 
                "Full-Stack Creator",
                "Stream Tech Pioneer"
              ]}
              typeSpeed={50}
              backSpeed={30}
              loop
              className="font-mono"
            />
          </div>
        </motion.div>
      </div>
    </section>
  );
};
```

### 3. Floating Navigation Bar
```typescript
// components/FloatingNav.tsx
import { motion, useScroll, useMotionValueEvent } from 'framer-motion';
import { useState } from 'react';

export const FloatingNav = () => {
  const [isVisible, setIsVisible] = useState(true);
  const { scrollY } = useScroll();

  useMotionValueEvent(scrollY, "change", (latest) => {
    const previous = scrollY.getPrevious();
    if (latest > previous && latest > 150) {
      setIsVisible(false);
    } else {
      setIsVisible(true);
    }
  });

  return (
    <motion.nav
      initial={{ y: -100 }}
      animate={{ y: isVisible ? 0 : -100 }}
      transition={{ duration: 0.3, ease: "easeInOut" }}
      className="fixed top-6 left-1/2 transform -translate-x-1/2 z-50"
    >
      <div className="bg-black/80 backdrop-blur-md rounded-full px-8 py-4 border border-gray-800">
        <ul className="flex space-x-8 text-white">
          {['About', 'Projects', 'Skills', 'Contact'].map((item) => (
            <motion.li
              key={item}
              whileHover={{ scale: 1.1 }}
              whileTap={{ scale: 0.95 }}
              className="cursor-pointer hover:text-cyan-400 transition-colors"
            >
              {item}
            </motion.li>
          ))}
        </ul>
      </div>
    </motion.nav>
  );
};
```

### 4. Project Cards with Advanced Hover Effects
```typescript
// components/ProjectCard.tsx
import { motion } from 'framer-motion';
import { useState } from 'react';

export const ProjectCard = ({ project }) => {
  const [isHovered, setIsHovered] = useState(false);

  return (
    <motion.div
      className="relative group cursor-pointer"
      onHoverStart={() => setIsHovered(true)}
      onHoverEnd={() => setIsHovered(false)}
      whileHover={{ y: -10 }}
      transition={{ duration: 0.3, ease: "easeOut" }}
    >
      <div className="bg-gray-900/50 backdrop-blur-sm rounded-xl p-6 border border-gray-800 overflow-hidden">
        {/* Animated Border */}
        <motion.div
          className="absolute inset-0 bg-gradient-to-r from-cyan-400 via-orange-400 to-cyan-400 rounded-xl"
          animate={{
            background: isHovered 
              ? "linear-gradient(90deg, #00d4ff 0%, #ff6b35 50%, #00d4ff 100%)"
              : "linear-gradient(90deg, transparent 0%, transparent 100%)"
          }}
          style={{
            padding: '1px',
            background: 'linear-gradient(90deg, #00d4ff 0%, #ff6b35 100%)',
            WebkitMask: 'linear-gradient(#fff 0 0) content-box, linear-gradient(#fff 0 0)',
            WebkitMaskComposite: 'source-out'
          }}
        />
        
        <div className="relative z-10 bg-black rounded-xl p-6">
          {/* Tech Stack Pills */}
          <div className="flex flex-wrap gap-2 mb-4">
            {project.techStack.map((tech) => (
              <motion.span
                key={tech}
                whileHover={{ scale: 1.05 }}
                className="px-3 py-1 text-xs bg-gray-800 text-cyan-400 rounded-full"
              >
                {tech}
              </motion.span>
            ))}
          </div>

          <h3 className="text-2xl font-bold text-white mb-3">{project.name}</h3>
          <p className="text-gray-300 mb-4">{project.description}</p>

          {/* Animated Features List */}
          <motion.div className="space-y-2">
            {project.features.map((feature, index) => (
              <motion.div
                key={index}
                initial={{ opacity: 0, x: -20 }}
                animate={{ opacity: isHovered ? 1 : 0.7, x: isHovered ? 0 : -20 }}
                transition={{ delay: index * 0.1, duration: 0.3 }}
                className="flex items-center text-gray-400"
              >
                <div className="w-1.5 h-1.5 bg-cyan-400 rounded-full mr-3" />
                {feature}
              </motion.div>
            ))}
          </motion.div>

          {/* Interactive Buttons */}
          <div className="flex space-x-4 mt-6">
            <motion.button
              whileHover={{ scale: 1.05 }}
              whileTap={{ scale: 0.95 }}
              className="bg-gradient-to-r from-cyan-500 to-blue-500 text-white px-6 py-2 rounded-lg font-medium"
            >
              View Project
            </motion.button>
            <motion.button
              whileHover={{ scale: 1.05 }}
              whileTap={{ scale: 0.95 }}
              className="border border-gray-600 text-gray-300 px-6 py-2 rounded-lg font-medium hover:border-cyan-400 hover:text-cyan-400 transition-colors"
            >
              GitHub
            </motion.button>
          </div>
        </div>
      </div>
    </motion.div>
  );
};
```

---

## ðŸŽ® Gaming-Inspired Effects

### 1. Particle Background System
```bash
npm install tsparticles @tsparticles/react @tsparticles/engine @tsparticles/basic
```

```typescript
// components/ParticleBackground.tsx
import { useCallback } from "react";
import Particles from "@tsparticles/react";
import type { Container, Engine } from "@tsparticles/engine";
import { loadBasic } from "@tsparticles/basic";

export const ParticleBackground = () => {
  const particlesInit = useCallback(async (engine: Engine) => {
    await loadBasic(engine);
  }, []);

  return (
    <Particles
      id="tsparticles"
      init={particlesInit}
      options={{
        background: {
          color: {
            value: "#000000",
          },
        },
        fpsLimit: 120,
        particles: {
          color: {
            value: ["#00d4ff", "#ff6b35", "#ffffff"],
          },
          move: {
            direction: "none",
            enable: true,
            outModes: {
              default: "bounce",
            },
            random: false,
            speed: 1,
            straight: false,
          },
          number: {
            density: {
              enable: true,
              area: 1500,
            },
            value: 100,
          },
          opacity: {
            value: 0.3,
            animation: {
              enable: true,
              speed: 0.5,
            }
          },
          shape: {
            type: "circle",
          },
          size: {
            value: { min: 1, max: 3 },
          },
        },
        detectRetina: true,
      }}
      className="absolute inset-0 -z-10"
    />
  );
};
```

### 2. Gaming Stats Counter
```typescript
// components/GamingStats.tsx
import { motion } from 'framer-motion';
import CountUp from 'react-countup';
import { useInView } from 'react-intersection-observer';

export const GamingStats = () => {
  const [ref, inView] = useInView({ threshold: 0.3, triggerOnce: true });

  const stats = [
    { label: "Projects Completed", value: 12, suffix: "+" },
    { label: "GitHub Repositories", value: 30, suffix: "+" },
    { label: "Gaming Hours", value: 2000, suffix: "+" },
    { label: "Coffee Consumed", value: 500, suffix: " Cups" }
  ];

  return (
    <section ref={ref} className="py-20 bg-black">
      <div className="container mx-auto px-6">
        <div className="grid grid-cols-2 md:grid-cols-4 gap-8">
          {stats.map((stat, index) => (
            <motion.div
              key={index}
              initial={{ opacity: 0, y: 50 }}
              animate={inView ? { opacity: 1, y: 0 } : { opacity: 0, y: 50 }}
              transition={{ delay: index * 0.2, duration: 0.6 }}
              className="text-center"
            >
              <div className="text-4xl md:text-6xl font-bold text-transparent bg-gradient-to-r from-cyan-400 to-orange-400 bg-clip-text mb-2">
                {inView && (
                  <CountUp
                    end={stat.value}
                    duration={2}
                    suffix={stat.suffix}
                  />
                )}
              </div>
              <p className="text-gray-300 font-medium">{stat.label}</p>
            </motion.div>
          ))}
        </div>
      </div>
    </section>
  );
};
```

---

## ðŸ“± Responsive Layouts & Components

### Site Structure
```
src/
â”œâ”€â”€ components/
â”‚   â”œâ”€â”€ ui/             # Reusable UI components
â”‚   â”œâ”€â”€ layout/         # Layout components
â”‚   â”œâ”€â”€ sections/       # Page sections
â”‚   â””â”€â”€ effects/        # Animation effects
â”œâ”€â”€ pages/
â”‚   â”œâ”€â”€ index.tsx       # Home/Landing
â”‚   â”œâ”€â”€ about.tsx       # About page
â”‚   â”œâ”€â”€ projects.tsx    # Projects showcase
â”‚   â”œâ”€â”€ skills.tsx      # Technical skills
â”‚   â””â”€â”€ contact.tsx     # Contact form
â”œâ”€â”€ styles/
â”‚   â””â”€â”€ globals.css     # Global styles
â”œâ”€â”€ data/
â”‚   â”œâ”€â”€ projects.ts     # Project data
â”‚   â”œâ”€â”€ skills.ts       # Skills data
â”‚   â””â”€â”€ personal.ts     # Personal info
â””â”€â”€ utils/
    â””â”€â”€ animations.ts   # Animation utilities
```

### Personal Information Integration
```typescript
// data/personal.ts
export const personalInfo = {
  name: "Gabhasti Giri",
  alias: "Snozxyx",
  title: "Software Developer & Gaming Enthusiast",
  philosophy: "I work independently and exploring beyond my imagination",
  github: "https://github.com/snozxyx",
  
  skills: {
    primary: ["TypeScript", "JavaScript", "React", "Node.js"],
    frontend: ["Next.js", "React", "Tailwind CSS", "Framer Motion"],
    backend: ["Node.js", "Express.js", "REST APIs"],
    specialized: ["WebOS SDK", "Discord.js", "HLS.js", "Gaming APIs"],
    tools: ["Git", "VSCode", "Docker", "Vercel"]
  },

  games: [
    "Valorant", "GTA V", "Minecraft", "Once Human", 
    "Genshin Impact", "Conflict of Nations 3", 
    "World War 3", "Call of Duty"
  ],

  projects: [
    {
      name: "Tatakai",
      description: "Netflix-inspired anime streaming platform with cross-platform support",
      techStack: ["TypeScript", "Next.js", "React", "WebOS SDK", "HLS.js"],
      features: [
        "Cross-platform architecture (Web + Smart TV)",
        "Advanced video streaming with quality selection", 
        "TV remote control navigation",
        "Real-time search and recommendations",
        "Multi-language subtitle support"
      ],
      status: "Active Development",
      github: "https://github.com/snozxyx/Tatakai",
      type: "streaming"
    },
    // ... more projects
  ]
};
```

---

## ðŸš€ Advanced Implementations

### 1. Smooth Scrolling & Parallax
```bash
npm install locomotive-scroll
```

```typescript
// hooks/useLocomotiveScroll.ts
import { useEffect, useRef } from 'react';
import LocomotiveScroll from 'locomotive-scroll';

export const useLocomotiveScroll = () => {
  const scrollRef = useRef<HTMLDivElement>(null);

  useEffect(() => {
    if (!scrollRef.current) return;

    const scroll = new LocomotiveScroll({
      el: scrollRef.current,
      smooth: true,
      multiplier: 0.8,
      smartphone: {
        smooth: true,
      },
      tablet: {
        smooth: true,
      },
    });

    return () => scroll.destroy();
  }, []);

  return scrollRef;
};
```

### 2. Interactive Terminal Component
```typescript
// components/InteractiveTerminal.tsx
import { motion } from 'framer-motion';
import { useState, useEffect } from 'react';

export const InteractiveTerminal = () => {
  const [output, setOutput] = useState<string[]>([]);
  const [currentCommand, setCurrentCommand] = useState('');

  const commands = {
    'help': 'Available commands: about, skills, projects, contact, clear',
    'about': 'Software Developer | Gaming Enthusiast | Full-Stack Creator',
    'skills': 'TypeScript, React, Node.js, Discord.js, WebOS, Gaming APIs',
    'projects': 'Tatakai, Codify, Kysta, LauncherX-Client, and more...',
    'contact': 'GitHub: @snozxyx | Let\'s build something amazing!',
    'clear': 'CLEAR_COMMAND'
  };

  const handleCommand = (cmd: string) => {
    const response = commands[cmd.toLowerCase()] || `Command '${cmd}' not found. Type 'help' for available commands.`;
    
    if (response === 'CLEAR_COMMAND') {
      setOutput([]);
    } else {
      setOutput(prev => [...prev, `> ${cmd}`, response]);
    }
    setCurrentCommand('');
  };

  return (
    <motion.div
      initial={{ opacity: 0, scale: 0.95 }}
      animate={{ opacity: 1, scale: 1 }}
      className="bg-gray-900 rounded-lg p-6 font-mono text-sm"
    >
      <div className="flex items-center mb-4">
        <div className="flex space-x-2">
          <div className="w-3 h-3 bg-red-500 rounded-full"></div>
          <div className="w-3 h-3 bg-yellow-500 rounded-full"></div>
          <div className="w-3 h-3 bg-green-500 rounded-full"></div>
        </div>
        <span className="ml-4 text-gray-400">snozxyx@portfolio:~$</span>
      </div>

      <div className="text-green-400 mb-4">
        {output.map((line, index) => (
          <motion.div
            key={index}
            initial={{ opacity: 0, y: 10 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ delay: index * 0.1 }}
          >
            {line}
          </motion.div>
        ))}
      </div>

      <div className="flex items-center">
        <span className="text-cyan-400 mr-2">$</span>
        <input
          type="text"
          value={currentCommand}
          onChange={(e) => setCurrentCommand(e.target.value)}
          onKeyDown={(e) => e.key === 'Enter' && handleCommand(currentCommand)}
          className="bg-transparent outline-none text-white flex-1"
          placeholder="Type 'help' to get started..."
        />
        <motion.div
          animate={{ opacity: [1, 0] }}
          transition={{ duration: 1, repeat: Infinity }}
          className="w-2 h-5 bg-white ml-1"
        />
      </div>
    </motion.div>
  );
};
```

### 3. Advanced Loading States
```typescript
// components/LoadingScreen.tsx
import { motion } from 'framer-motion';
import { useEffect, useState } from 'react';

export const LoadingScreen = ({ onComplete }: { onComplete: () => void }) => {
  const [progress, setProgress] = useState(0);
  const [currentText, setCurrentText] = useState('Initializing...');

  const loadingSteps = [
    'Loading assets...',
    'Connecting to GitHub...',
    'Fetching projects...',
    'Preparing portfolio...',
    'Almost ready...'
  ];

  useEffect(() => {
    const timer = setInterval(() => {
      setProgress((prev) => {
        const newProgress = prev + Math.random() * 15;
        if (newProgress >= 100) {
          clearInterval(timer);
          setTimeout(onComplete, 500);
          return 100;
        }
        
        const stepIndex = Math.floor((newProgress / 100) * loadingSteps.length);
        setCurrentText(loadingSteps[stepIndex] || loadingSteps[loadingSteps.length - 1]);
        
        return newProgress;
      });
    }, 200);

    return () => clearInterval(timer);
  }, [onComplete]);

  return (
    <motion.div
      initial={{ opacity: 1 }}
      exit={{ opacity: 0 }}
      className="fixed inset-0 bg-black flex items-center justify-center z-50"
    >
      <div className="text-center">
        <motion.div
          animate={{ rotate: 360 }}
          transition={{ duration: 2, repeat: Infinity, ease: "linear" }}
          className="w-16 h-16 border-4 border-cyan-400 border-t-transparent rounded-full mx-auto mb-8"
        />
        
        <motion.h2
          key={currentText}
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          className="text-2xl font-bold text-white mb-4"
        >
          {currentText}
        </motion.h2>

        <div className="w-64 bg-gray-800 rounded-full h-2 mx-auto mb-4">
          <motion.div
            initial={{ width: 0 }}
            animate={{ width: `${progress}%` }}
            transition={{ duration: 0.3 }}
            className="bg-gradient-to-r from-cyan-400 to-orange-400 h-2 rounded-full"
          />
        </div>

        <p className="text-gray-400 font-mono">{Math.round(progress)}%</p>
      </div>
    </motion.div>
  );
};
```

---

## ðŸ› ï¸ Development Workflow

### 1. Project Setup
```bash
# Create Next.js project with TypeScript
npx create-next-app@latest snozxyx-portfolio --typescript --tailwind --eslint --app

# Install all dependencies
npm install [all packages from above]

# Setup development environment
npm run dev
```

### 2. Folder Structure Setup
```bash
# Create component directories
mkdir -p src/components/{ui,layout,sections,effects}
mkdir -p src/data src/utils src/hooks

# Create page files
touch src/app/{about,projects,skills,contact}/page.tsx
```

### 3. Configuration Files
```typescript
// tailwind.config.js
module.exports = {
  content: ['./src/**/*.{js,ts,jsx,tsx,mdx}'],
  theme: {
    extend: {
      colors: {
        'custom-black': '#000000',
        'custom-gray': '#0a0a0a',
        'custom-accent': '#00d4ff',
        'gaming-orange': '#ff6b35',
      },
      animation: {
        'float': 'float 6s ease-in-out infinite',
        'glow': 'glow 2s ease-in-out infinite alternate',
      },
      keyframes: {
        float: {
          '0%, 100%': { transform: 'translateY(0px)' },
          '50%': { transform: 'translateY(-20px)' },
        },
        glow: {
          '0%': { boxShadow: '0 0 20px rgba(0, 212, 255, 0.5)' },
          '100%': { boxShadow: '0 0 30px rgba(255, 107, 53, 0.8)' },
        }
      }
    },
  },
  plugins: [require('@tailwindcss/typography')],
}
```

---

## ðŸŽ¯ Unique Features to Implement

### 1. Gaming Achievement System
- Display coding milestones as gaming achievements
- Animated badge unlocks
- Progress bars for different skill levels

### 2. Interactive Code Playground
- Live code editor for small demos
- Syntax highlighting with gaming themes
- Real-time preview capabilities

### 3. 3D Project Showcase
- Three.js integration for 3D project cards
- Interactive 3D models of applications
- VR/AR preview capabilities

### 4. Dynamic Theme Switching
- Multiple dark theme variants
- Gaming-inspired color schemes
- Smooth theme transitions

### 5. Easter Eggs
- Hidden terminal commands
- Gaming references
- Interactive surprises throughout the site

---

## ðŸ“Š Performance Optimization

### Best Practices
```typescript
// Image optimization
import Image from 'next/image';

// Lazy loading components
import dynamic from 'next/dynamic';
const HeavyComponent = dynamic(() => import('./HeavyComponent'), {
  loading: () => <Skeleton />,
  ssr: false
});

// Animation optimization
const optimizedVariants = {
  initial: { opacity: 0, y: 20 },
  animate: { 
    opacity: 1, 
    y: 0,
    transition: {
      duration: 0.4,
      ease: [0.25, 0.46, 0.45, 0.94] // Custom easing
    }
  }
};
```

---

## ðŸš€ Deployment Strategy

### Vercel Deployment
```bash
# Install Vercel CLI
npm i -g vercel

# Deploy
vercel --prod

# Custom domain setup
vercel domains add snozxyx.dev
```

### Environment Variables
```env
NEXT_PUBLIC_GITHUB_API_URL=https://api.github.com/users/snozxyx
NEXT_PUBLIC_ANALYTICS_ID=your_analytics_id
```

---

## ðŸ“‹ Final Checklist

### Essential Features
- [ ] Responsive design (mobile-first)
- [ ] Dark theme implementation
- [ ] Smooth animations and transitions
- [ ] Fast loading times (<3s)
- [ ] SEO optimization
- [ ] Accessibility compliance (WCAG)
- [ ] Progressive Web App features
- [ ] Analytics integration
- [ ] Contact form functionality
- [ ] GitHub integration
- [ ] Gaming-inspired elements
- [ ] Interactive components
- [ ] Professional presentation

### Performance Targets
- [ ] Lighthouse score >90
- [ ] First Contentful Paint <1.5s
- [ ] Largest Contentful Paint <2.5s
- [ ] Cumulative Layout Shift <0.1
- [ ] Time to Interactive <3.5s

---

*This comprehensive guide provides everything needed to create a modern, aesthetic, and uniquely beautiful dark portfolio that showcases Snozxyx's technical expertise while maintaining a professional gaming aesthetic.*